import streamlit as st
import pandas as pd 
import numpy as np
import plotly.express as px
import re 
import plotly.graph_objects as go

# CONFIGURACI√ìN INICIAL Y T√çTULO

st.set_page_config(
    page_title="An√°lisis Calidad-Precio Veh√≠culos 2025", 
    layout="wide",
    initial_sidebar_state="expanded",
    page_icon="üöó" 
)

# T√≠tulo principal 
st.title("üöó An√°lisis Comparativo de la Relaci√≥n Calidad-Precio en Veh√≠culos üöÄ")
st.markdown("---") 
st.markdown("Por **Angel Pastrano** y **Valeria Barreto** | Mercado Global 2025")


st.sidebar.title("üõ†Ô∏è Navegaci√≥n")
opciones_menu = {
    "Introducci√≥n": "üìö Introducci√≥n",
    "Top 10 Modelos": "ü•á Top 10 Modelos",
    "Comparativa por Marcas": "üè≠ Comparativa por Marcas",
    "An√°lisis por Combustible": "‚õΩ An√°lisis por Combustible",
    "Conclusiones": "üìù Conclusiones"
}

opcion_seleccionada = st.sidebar.radio(
    "Selecciona una secci√≥n:", 
    list(opciones_menu.keys()),
    format_func=lambda x: opciones_menu[x] 
)
st.sidebar.markdown("---") 


# CARGA DE DATOS 

try:
    
    data_carros = pd.read_csv('Cars Datasets 2025.csv', encoding='latin-1') 
    
except FileNotFoundError:
    st.error("‚ùå Error: Archivo 'Cars Datasets 2025.csv' no encontrado. Aseg√∫rate de que el archivo est√© en la misma carpeta.")
    data_carros = pd.DataFrame()
    
if not data_carros.empty:

    # Funciones de Limpieza 
    def clean_and_avg_price(price_str):
        if pd.isna(price_str):
            return np.nan
        price_clean = re.sub(r'[$, ]|approx', '', str(price_str))
        if "-" in price_clean:
            prices = [float(p) for p in price_clean.split('-') if p]
            return np.mean(prices) if prices else np.nan
        try:
            return float(price_clean)
        except ValueError:
            return np.nan

    def extract_first_number(text):
        if pd.isna(text):
            return np.nan
        match = re.search(r'^\d+\.?\d*', str(text))
        return float(match.group(0)) if match else np.nan

    # Aplicar las funciones de limpieza 
    data_qpr = data_carros.copy()
    
    try:
        data_qpr['Price_Avg'] = data_qpr['Cars Prices'].apply(clean_and_avg_price) 
        data_qpr['HP_Clean'] = data_qpr['HorsePower'].apply(extract_first_number) 
        data_qpr['Speed_Clean'] = data_qpr['Total Speed'].apply(extract_first_number) 
        data_qpr['Accel_Clean'] = data_qpr['Performance(0 - 100 )KM/H'].apply(extract_first_number) 
        
    except KeyError as e:
        st.error(f"‚ùå Error de columna: {e}. Por favor, verifique el nombre de la columna en su archivo CSV. Nombres de columnas disponibles: {data_carros.columns.tolist()}")
        data_carros = pd.DataFrame() 
        
if not data_carros.empty:
    
    # Filtrar datos v√°lidos
    data_qpr = data_qpr.dropna(subset=['Price_Avg', 'HP_Clean', 'Speed_Clean', 'Accel_Clean'])
    data_qpr = data_qpr[data_qpr['Price_Avg'] > 0]
    
    # C√°lculo del √çndice de Calidad y QPR
    data_qpr['Quality_Index'] = data_qpr['HP_Clean'] + data_qpr['Speed_Clean'] - (10 * data_qpr['Accel_Clean'])
    data_qpr['QPR'] = (data_qpr['Quality_Index'] / data_qpr['Price_Avg']) * 1000

    
    # Clasificaci√≥n de Motorizaci√≥n
    data_qpr['Motorizacion'] = data_qpr['Fuel Types'].apply(lambda x: 
                                                             "F√≥sil" if x in ["Petrol", "Diesel"] else
                                                             "H√≠brido" if x in ["Hybrid", "plug in hyrbrid"] else
                                                             "El√©ctrico" if x == "Electric" else "Otro/No Clasificado") 



if opcion_seleccionada == "Introducci√≥n":
    
    st.header("üìö Introducci√≥n")
    st.markdown("""
    En el mercado automotriz de hoy, tomar una buena decisi√≥n de compra no se trata solo de ver qu√© coche tiene el precio m√°s bajo, ni tampoco el que tiene m√°s caballos. Se trata de encontrar el punto perfecto entre el precio y lo que el coche realmente ofrece. ¬øEstamos pagando por el valor real o solo por el nombre de la marca?
    
    Este estudio se centra en responder esa pregunta usando una m√©trica clave: la **Relaci√≥n Calidad-Precio (QPR)**. El QPR no es m√°s que una forma de medir, de manera justa y objetiva, cu√°ntos puntos de rendimiento t√©cnico (potencia, velocidad, eficiencia, etc.) recibes por cada unidad de dinero invertida.
    
    ---
    
    ### üìä M√©tricas Clave del Dataset
    """)
    
    total_carros = data_qpr.shape[0]
    precio_promedio = data_qpr['Price_Avg'].mean()
    qpr_max = data_qpr['QPR'].max()
    
    col1, col2, col3 = st.columns(3)
    
    col1.metric("Total Modelos Analizados", f"{total_carros} üèéÔ∏è")
    col2.metric("Precio Promedio", f"${precio_promedio:,.0f} üí≤")
    col3.metric("QPR M√°ximo (Mejor Valor)", f"{qpr_max:.2f} Pts/1k USD ‚≠ê")
    
elif opcion_seleccionada == "Top 10 Modelos" and not data_carros.empty:
    st.header("ü•á Top 10 Mejores Carros Calidad/Precio")
    
    top_10_qpr = data_qpr.sort_values('QPR', ascending=False).head(10)[
        ['Company Names', 'Cars Names', 'Motorizacion', 'Price_Avg', 'Quality_Index', 'QPR']
    ].copy() 
    
    # Renombrar columnas para la tabla
    top_10_qpr.columns = [
        "Fabricante", 
        "Modelo", 
        "Motorizaci√≥n", 
        "Precio Promedio (USD)", 
        "√çndice de Calidad", 
        "Relaci√≥n QPR (Puntos/1k USD)"
    ]
    
    st.dataframe(
        top_10_qpr, 
        column_config={
            "Precio Promedio (USD)": st.column_config.NumberColumn(
                "Precio Promedio (USD)", format="$%d"
            ),
            "Relaci√≥n QPR (Puntos/1k USD)": st.column_config.ProgressColumn(
                "Relaci√≥n QPR (Puntos/1k USD)",
                format="%.2f",
                min_value=0,
                max_value=top_10_qpr['Relaci√≥n QPR (Puntos/1k USD)'].max(),
            ),
        },
        hide_index=True, 
        use_container_width=True
    )
    
    fig = px.bar(top_10_qpr.sort_values('Relaci√≥n QPR (Puntos/1k USD)'), 
                 x='Relaci√≥n QPR (Puntos/1k USD)', 
                 y='Modelo', 
                 orientation='h', 
                 color='Motorizaci√≥n',
                 
                 template='plotly_dark', 
                 color_discrete_map={
                     "F√≥sil": "#FC8D59",
                     "H√≠brido": "#99D594",
                     "El√©ctrico": "#3288BD",
                     "Otro/No Clasificado": "#FEE08B"
                 },
                 title="üìà Top 10: Relaci√≥n Calidad-Precio (QPR)")
    st.plotly_chart(fig, use_container_width=True)

elif opcion_seleccionada == "Comparativa por Marcas" and not data_carros.empty:
    st.header("üè≠ Comparativa por Marcas")
    
    # C√≥digo Comparativa por Marcas
    brand_qpr = data_qpr.groupby('Company Names').agg(
        Modelos=('QPR', 'size'), 
        QPR_Promedio=('QPR', 'mean'), 
        Precio_Promedio_USD=('Price_Avg', 'mean')
    )
    brand_qpr = brand_qpr[brand_qpr['Modelos'] >= 2].sort_values('QPR_Promedio', ascending=False).head(10)
    brand_qpr = brand_qpr.reset_index().rename(columns={'Company Names': 'Fabricante'}) 
    
    # Personalizar la presentaci√≥n de la tabla
    st.dataframe(
        brand_qpr.set_index('Fabricante'),
        column_config={
            "QPR_Promedio": st.column_config.ProgressColumn(
                "QPR Promedio (Pts/1k USD)",
                format="%.2f",
                min_value=brand_qpr['QPR_Promedio'].min(),
                max_value=brand_qpr['QPR_Promedio'].max(),
            ),
            "Precio_Promedio_USD": st.column_config.NumberColumn(
                "Precio Promedio (USD)", format="$%d"
            ),
        },
        use_container_width=True
    )
    
    # Gr√°fico Comparativa por Marcas
    fig = px.bar(brand_qpr.sort_values('QPR_Promedio'), 
                 x='QPR_Promedio', 
                 y='Fabricante', 
                 orientation='h',
                 template='plotly_dark',
                 color_discrete_sequence=px.colors.sequential.Sunsetdark,
                 title="üìä Top 10 Marcas por QPR Promedio")
    st.plotly_chart(fig, use_container_width=True)

elif opcion_seleccionada == "An√°lisis por Combustible" and not data_carros.empty:
    st.header("‚õΩ An√°lisis por Combustible")
    
    # C√≥digo An√°lisis por Combustible
    fuel_qpr = data_qpr.groupby('Motorizacion').agg(
        Modelos=('QPR', 'size'), 
        QPR_Promedio=('QPR', 'mean'),
        Precio_Promedio=('Price_Avg', 'mean')
    ).sort_values('QPR_Promedio', ascending=False)
    
    # Presentar una tabla con estilos
    st.dataframe(
        fuel_qpr,
        column_config={
            "QPR_Promedio": st.column_config.ProgressColumn(
                "QPR Promedio (Pts/1k USD)",
                format="%.2f",
                min_value=fuel_qpr['QPR_Promedio'].min(),
                max_value=fuel_qpr['QPR_Promedio'].max(),
            ),
             "Precio_Promedio": st.column_config.NumberColumn(
                "Precio Promedio (USD)", format="$%d"
            ),
        },
        use_container_width=True
    )
    
    # Gr√°fico An√°lisis por Combustible 
    fig_radar = go.Figure()
    
    # Normalizar los datos para el radar (escala 0 a 1)
    df_radar = fuel_qpr.reset_index().set_index('Motorizacion')
    df_radar_norm = (df_radar - df_radar.min()) / (df_radar.max() - df_radar.min())
    
    categorias = ['QPR_Promedio', 'Precio_Promedio', 'Modelos']
    
    for motor in df_radar_norm.index:
        fig_radar.add_trace(go.Scatterpolar(
            r=df_radar_norm.loc[motor, categorias].values.tolist(),
            theta=categorias,
            fill='toself',
            name=motor
        ))
    
    fig_radar.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1.05]
            )),
        title="Impacto Relativo de la Motorizaci√≥n (Normalizado)",
        template='plotly_dark',
        showlegend=True
    )
    
    st.plotly_chart(fig_radar, use_container_width=True)
    
elif opcion_seleccionada == "Conclusiones":
    # contenido de Conclusiones
    st.header("üìù Conclusiones y Recomendaciones")
    st.markdown("""
    [El Ganador del Valor QRP
    Vimos claramente que tener el QPR m√°s alto no es cosa de marcas de lujo. Los modelos que ganan son los que te dan m√°s caballos, velocidad y calidad por cada euro/d√≥lar que pagas. Esto prueba que el valor est√° en la ingenier√≠a inteligente, no solo en el precio.
    
    **La Marca Est√°ndar es la Jefa:**
    Las marcas que ganan en el QPR Promedio (las m√°s consistentes) son las que tienen su proceso de producci√≥n s√∫per optimizado. Saben meter buen equipamiento sin que el precio se dispare.
    
    **El Balance de la Motorizaci√≥n:**
    La tecnolog√≠a de motorizaci√≥n que se llev√≥ el mejor QPR promedio **(e.g., H√≠brido)** ha encontrado el punto perfecto. Son lo suficientemente nuevas para ser eficientes, pero sus precios ya no est√°n por las nubes.
    
    **No Pagues Dem√°s:**
    Si quieres el mejor valor, ignora la publicidad y mira la tabla del Top 10 de QPR. Esos modelos son los que te van a dar el mejor coche por tu dinero.
    
    **Revisa la Tecnolog√≠a:**
    Si vas a cambiar a un coche [ej: H√≠brido o El√©ctrico], compara su QPR con los de gasolina. Aseg√∫rate de que est√°s pagando por beneficios reales y no solo por la moda. La tecnolog√≠a ganadora es la que, en promedio, te da el mejor rendimiento.]
    """)    